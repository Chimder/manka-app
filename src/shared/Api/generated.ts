/**
 * Generated by orval v6.21.0 üç∫
 * Do not edit manually.
 * Block List
 * OpenAPI spec version: 1.0.0
 */
import { customInstance } from './axios.instance';
import type { BodyType } from './axios.instance';
export type UserControllerDeleteAccountParams = {
email: string;
};

export type UserControllerAddFavoriteParams = {
email: string;
name: string;
};

export type MangaControllerGetMangaRatingParams = {
name: string;
rating: number;
};

export type MangaControllerGetUserMangaParams = {
email: string;
};

export type MangaControllerGetUserFavoriteParams = {
email: string;
name: string;
};

export type MangaControllerGetMangaByGenresParams = {
genres: string[];
name: string;
status: string;
country: string;
orderField: string;
orderDirection: string;
page: number;
perPage: number;
};

export type MangaControllerGetMangaChapterParams = {
name: string;
chapter: string;
};

export type MangaControllerGetMangaByNameParams = {
name: string;
};

export interface UserDto {
  email: string;
  id: string;
  image: string;
  name: string;
}

export interface Chapter {
  animeName: string;
  chapter: number;
  createdAt: number;
  img: string[];
  name: string;
}

export interface MangaDto {
  author: string;
  averageRating: number;
  chapters: Chapter[];
  country: string;
  describe: string;
  genres: string[];
  id: number;
  img: string;
  imgHeader: string;
  name: string;
  popularity: number;
  published: number;
  ratingCount: number;
  status: string;
}




// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;


  export const mangaControllerGetAllManga = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MangaDto[]>(
      {url: `/manga/get-all`, method: 'GET'
    },
      options);
    }
  
export const mangaControllerGetMangaByName = (
    params: MangaControllerGetMangaByNameParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MangaDto>(
      {url: `/manga/get-one`, method: 'GET',
        params
    },
      options);
    }
  
export const mangaControllerGetMangaChapter = (
    params: MangaControllerGetMangaChapterParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MangaDto>(
      {url: `/manga/get-chapter`, method: 'GET',
        params
    },
      options);
    }
  
export const mangaControllerGetMankaPopular = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MangaDto[]>(
      {url: `/manga/get-popular`, method: 'GET'
    },
      options);
    }
  
export const mangaControllerGetMangaByGenres = (
    params: MangaControllerGetMangaByGenresParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MangaDto[]>(
      {url: `/manga/get-by-filters`, method: 'GET',
        params
    },
      options);
    }
  
export const mangaControllerCreateManga = (
    mangaDto: BodyType<MangaDto>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/manga/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: mangaDto
    },
      options);
    }
  
export const mangaControllerGetUserFavorite = (
    params: MangaControllerGetUserFavoriteParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/manga/userFavorite`, method: 'GET',
        params
    },
      options);
    }
  
export const mangaControllerGetUserManga = (
    params: MangaControllerGetUserMangaParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MangaDto[]>(
      {url: `/manga/user-favorite`, method: 'GET',
        params
    },
      options);
    }
  
export const mangaControllerGetMangaRating = (
    params: MangaControllerGetMangaRatingParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/manga/rating`, method: 'GET',
        params
    },
      options);
    }
  
export const userControllerRegNewUser = (
    userDto: BodyType<UserDto>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/user/checkOrCreate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userDto
    },
      options);
    }
  
export const userControllerAddFavorite = (
    params: UserControllerAddFavoriteParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/user/addFavorite`, method: 'POST',
        params
    },
      options);
    }
  
export const userControllerDeleteAccount = (
    params: UserControllerDeleteAccountParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/user/delete`, method: 'DELETE',
        params
    },
      options);
    }
  
export type MangaControllerGetAllMangaResult = NonNullable<Awaited<ReturnType<typeof mangaControllerGetAllManga>>>
export type MangaControllerGetMangaByNameResult = NonNullable<Awaited<ReturnType<typeof mangaControllerGetMangaByName>>>
export type MangaControllerGetMangaChapterResult = NonNullable<Awaited<ReturnType<typeof mangaControllerGetMangaChapter>>>
export type MangaControllerGetMankaPopularResult = NonNullable<Awaited<ReturnType<typeof mangaControllerGetMankaPopular>>>
export type MangaControllerGetMangaByGenresResult = NonNullable<Awaited<ReturnType<typeof mangaControllerGetMangaByGenres>>>
export type MangaControllerCreateMangaResult = NonNullable<Awaited<ReturnType<typeof mangaControllerCreateManga>>>
export type MangaControllerGetUserFavoriteResult = NonNullable<Awaited<ReturnType<typeof mangaControllerGetUserFavorite>>>
export type MangaControllerGetUserMangaResult = NonNullable<Awaited<ReturnType<typeof mangaControllerGetUserManga>>>
export type MangaControllerGetMangaRatingResult = NonNullable<Awaited<ReturnType<typeof mangaControllerGetMangaRating>>>
export type UserControllerRegNewUserResult = NonNullable<Awaited<ReturnType<typeof userControllerRegNewUser>>>
export type UserControllerAddFavoriteResult = NonNullable<Awaited<ReturnType<typeof userControllerAddFavorite>>>
export type UserControllerDeleteAccountResult = NonNullable<Awaited<ReturnType<typeof userControllerDeleteAccount>>>
